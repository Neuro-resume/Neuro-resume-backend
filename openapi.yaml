components:
  schemas:
    ChangePasswordRequest:
      description: Schema for password change request.
      properties:
        current_password:
          minLength: 6
          title: Current Password
          type: string
        new_password:
          minLength: 6
          title: New Password
          type: string
      required:
      - current_password
      - new_password
      title: ChangePasswordRequest
      type: object
    CompleteSessionResponse:
      description: Response after completing a session (includes generated markdown).
      properties:
        resume_markdown:
          $ref: '#/components/schemas/ResumeMarkdownPayload'
        session:
          $ref: '#/components/schemas/SessionResponse'
      required:
      - session
      - resume_markdown
      title: CompleteSessionResponse
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    MessageCreate:
      description: Schema for creating a new message.
      properties:
        content:
          description: Message content
          maxLength: 5000
          minLength: 1
          title: Content
          type: string
      required:
      - content
      title: MessageCreate
      type: object
    MessageResponse:
      description: Message schema for API responses.
      properties:
        content:
          title: Content
          type: string
        created_at:
          format: date-time
          title: Created At
          type: string
        id:
          format: uuid
          title: Id
          type: string
        metadata:
          anyOf:
          - type: object
          - type: 'null'
          title: Metadata
        role:
          $ref: '#/components/schemas/MessageRole'
        session_id:
          format: uuid
          title: Session Id
          type: string
      required:
      - id
      - session_id
      - role
      - content
      - created_at
      title: MessageResponse
      type: object
    MessageRole:
      description: Message role (user or AI).
      enum:
      - user
      - ai
      title: MessageRole
      type: string
    ProgressInfo:
      description: Progress information schema.
      properties:
        percentage:
          default: 0
          description: Completion percentage
          maximum: 100.0
          minimum: 0.0
          title: Percentage
          type: integer
      title: ProgressInfo
      type: object
    ResumeMarkdownPayload:
      description: Metadata and content for generated markdown resume.
      properties:
        content:
          description: Markdown content of the generated resume
          title: Content
          type: string
        filename:
          default: resume.md
          description: Suggested filename for downloading the generated resume
          title: Filename
          type: string
        mime_type:
          default: text/markdown
          description: MIME type for the generated resume file
          title: Mime Type
          type: string
      required:
      - content
      title: ResumeMarkdownPayload
      type: object
    SendMessageResponse:
      description: Response after sending a message.
      properties:
        ai_response:
          $ref: '#/components/schemas/MessageResponse'
        progress:
          $ref: '#/components/schemas/ProgressInfo'
        session_status:
          $ref: '#/components/schemas/SessionStatus'
        resume_markdown:
          anyOf:
          - $ref: '#/components/schemas/ResumeMarkdownPayload'
          - type: 'null'
        user_message:
          $ref: '#/components/schemas/MessageResponse'
      required:
      - user_message
      - ai_response
      - progress
      - session_status
      title: SendMessageResponse
      type: object
    SessionCreate:
      description: Schema for creating a new session.
      properties: {}
      title: SessionCreate
      type: object
    SessionResponse:
      description: Session schema for API responses.
      properties:
        completed_at:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          title: Completed At
        created_at:
          format: date-time
          title: Created At
          type: string
        id:
          format: uuid
          title: Id
          type: string
        message_count:
          title: Message Count
          type: integer
        progress:
          $ref: '#/components/schemas/ProgressInfo'
        resume_markdown:
          anyOf:
          - type: string
          - type: 'null'
          title: Resume Markdown
        status:
          $ref: '#/components/schemas/SessionStatus'
        updated_at:
          format: date-time
          title: Updated At
          type: string
        user_id:
          format: uuid
          title: User Id
          type: string
      required:
      - id
      - user_id
      - status
      - progress
      - message_count
      - created_at
      - updated_at
      title: SessionResponse
      type: object
    SessionStatus:
      description: Interview session status.
      enum:
      - IN_PROGRESS
      - COMPLETED
      - ABANDONED
      title: SessionStatus
      type: string
    TokenResponse:
      description: Schema for authentication token response.
      properties:
        expires_in:
          default: 86400
          description: Token expiration time in seconds
          title: Expires In
          type: integer
        token:
          description: JWT access token
          title: Token
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
      required:
      - token
      - user
      title: TokenResponse
      type: object
    UserCreate:
      description: Schema for creating a new user.
      properties:
        email:
          description: Email address
          format: email
          title: Email
          type: string
        password:
          description: Password
          minLength: 6
          title: Password
          type: string
        username:
          description: Username
          maxLength: 50
          minLength: 3
          title: Username
          type: string
      required:
      - username
      - email
      - password
      title: UserCreate
      type: object
    UserLogin:
      description: Schema for user login.
      properties:
        password:
          minLength: 6
          title: Password
          type: string
        username:
          maxLength: 50
          minLength: 3
          title: Username
          type: string
      required:
      - username
      - password
      title: UserLogin
      type: object
    UserResponse:
      description: User schema for API responses (excludes password).
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        email:
          format: email
          title: Email
          type: string
        id:
          format: uuid
          title: Id
          type: string
        updated_at:
          format: date-time
          title: Updated At
          type: string
        username:
          title: Username
          type: string
      required:
      - id
      - username
      - email
      - created_at
      - updated_at
      title: UserResponse
      type: object
    UserUpdate:
      description: Schema for updating user profile.
      properties:
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        username:
          anyOf:
          - maxLength: 50
            minLength: 3
            type: string
          - type: 'null'
          title: Username
      title: UserUpdate
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    HTTPBearer:
      scheme: bearer
      type: http
info:
  description: Backend API for AI-powered resume generation through conversational
    interface
  title: AI Resume Builder API
  version: 0.1.0
openapi: 3.1.0
paths:
  /:
    get:
      description: Root endpoint - API information.
      operationId: root__get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Root
  /health:
    get:
      description: Health check endpoint with database connection status.
      operationId: health_check_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Health Check
  /v1/auth/login:
    post:
      description: "Authenticate user and return token.\n\nArgs:\n    credentials:\
        \ Login credentials\n    db: Database session\n\nReturns:\n    Token response\
        \ with user data\n\nRaises:\n    HTTPException: If credentials are invalid"
      operationId: login_v1_auth_login_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login
      tags:
      - auth
  /v1/auth/logout:
    post:
      description: "Logout user (invalidate token).\n\nNote: In a stateless JWT implementation,\
        \ actual token invalidation\nwould require a token blacklist or short-lived\
        \ tokens with refresh tokens.\nThis endpoint is mainly for client-side token\
        \ removal.\n\nArgs:\n    current_user_id: Current authenticated user ID"
      operationId: logout_v1_auth_logout_post
      responses:
        '204':
          description: Successful Response
      security:
      - HTTPBearer: []
      summary: Logout
      tags:
      - auth
  /v1/auth/refresh:
    post:
      description: "Refresh access token.\n\nArgs:\n    current_user_id: Current authenticated\
        \ user ID\n    db: Database session\n\nReturns:\n    New token response\n\n\
        Raises:\n    HTTPException: If user not found"
      operationId: refresh_token_v1_auth_refresh_post
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Successful Response
      security:
      - HTTPBearer: []
      summary: Refresh Token
      tags:
      - auth
  /v1/auth/register:
    post:
      description: "Register a new user.\n\nArgs:\n    user_data: User registration\
        \ data\n    db: Database session\n\nReturns:\n    Token response with user\
        \ data\n\nRaises:\n    HTTPException: If username or email already exists"
      operationId: register_v1_auth_register_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Register
      tags:
      - auth
  /v1/interview/sessions:
    get:
      description: "Get list of user's interview sessions.\n\nArgs:\n    status_filter:\
        \ Optional status filter\n    limit: Maximum number of sessions per page\n\
        \    offset: Pagination offset\n    current_user_id: Current authenticated\
        \ user ID\n    db: Database session\n\nReturns:\n    Paginated list of sessions"
      operationId: get_interview_sessions_v1_interview_sessions_get
      parameters:
      - in: query
        name: status
        required: false
        schema:
          anyOf:
          - $ref: '#/components/schemas/SessionStatus'
          - type: 'null'
          title: Status
      - in: query
        name: limit
        required: false
        schema:
          default: 20
          maximum: 100
          minimum: 1
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Get Interview Sessions
      tags:
      - interview
    post:
      description: "Create a new interview session.\n\nArgs:\n    session_data: Optional\
        \ session creation data\n    current_user_id: Current authenticated user ID\n\
        \    db: Database session\n\nReturns:\n    Created session"
      operationId: create_interview_session_v1_interview_sessions_post
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
              - $ref: '#/components/schemas/SessionCreate'
              - type: 'null'
              title: Session Data
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Create Interview Session
      tags:
      - interview
  /v1/interview/sessions/{session_id}:
    delete:
      description: "Delete interview session.\n\nArgs:\nsession_id: Session ID\n \
        \   current_user_id: Current authenticated user ID\n    db: Database session\n\
        \nRaises:\n    HTTPException: If session not found"
      operationId: delete_interview_session_v1_interview_sessions__session_id__delete
      parameters:
      - in: path
        name: session_id
        required: true
        schema:
          format: uuid
          title: Session Id
          type: string
      responses:
        '204':
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Delete Interview Session
      tags:
      - interview
    get:
      description: "Get interview session details.\n\nArgs:\nsession_id: Session ID\n\
        \    current_user_id: Current authenticated user ID\n    db: Database session\n\
        \nReturns:\n    Session details\n\nRaises:\n    HTTPException: If session\
        \ not found"
      operationId: get_interview_session_v1_interview_sessions__session_id__get
      parameters:
      - in: path
        name: session_id
        required: true
        schema:
          format: uuid
          title: Session Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Get Interview Session
      tags:
      - interview
  /v1/interview/sessions/{session_id}/complete:
    post:
      description: "Complete interview and store generated resume markdown.\n\nArgs:\n\
        session_id: Session ID\n    current_user_id: Current authenticated user ID\n\
        \    db: Database session\n\nReturns:\n    Completed session and generated\
        \ markdown content\n\nRaises:\n    HTTPException: If session not found or\
        \ already completed"
      operationId: complete_interview_v1_interview_sessions__session_id__complete_post
      parameters:
      - in: path
        name: session_id
        required: true
        schema:
          format: uuid
          title: Session Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteSessionResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Complete Interview
      tags:
      - interview
  /v1/interview/sessions/{session_id}/messages:
    get:
      description: "Get all messages in interview session.\n\nArgs:\nsession_id: Session\
        \ ID\n    current_user_id: Current authenticated user ID\n    db: Database\
        \ session\n\nReturns:\n    Session messages\n\nRaises:\n    HTTPException:\
        \ If session not found"
      operationId: get_session_messages_v1_interview_sessions__session_id__messages_get
      parameters:
      - in: path
        name: session_id
        required: true
        schema:
          format: uuid
          title: Session Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Get Session Messages
      tags:
      - interview
    post:
      description: "Send message to interview and get AI response.\n\nNote: This is\
        \ a placeholder implementation. The actual AI integration\nwill be implemented\
        \ in the services layer using MCP.\n\nArgs:\nsession_id: Session ID\n    message_data:\
        \ Message content\n    current_user_id: Current authenticated user ID\n  \
        \  db: Database session\n\nReturns:\n    User message and AI response\n\n\
        Raises:\n    HTTPException: If session not found or already completed"
      operationId: send_message_v1_interview_sessions__session_id__messages_post
      parameters:
      - in: path
        name: session_id
        required: true
        schema:
          format: uuid
          title: Session Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Send Message
      tags:
      - interview
  /v1/interview/sessions/{session_id}/resume:
    get:
      description: Return stored resume content for the given session as markdown.
      operationId: get_session_resume_v1_interview_sessions__session_id__resume_get
      parameters:
      - in: path
        name: session_id
        required: true
        schema:
          format: uuid
          title: Session Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Get Session Resume
      tags:
      - interview
  /v1/user/change-password:
    post:
      description: "Change user password.\n\nArgs:\n    password_data: Password change\
        \ data\n    current_user_id: Current authenticated user ID\n    db: Database\
        \ session\n\nRaises:\n    HTTPException: If user not found or current password\
        \ is incorrect"
      operationId: change_password_v1_user_change_password_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        '204':
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Change Password
      tags:
      - user
  /v1/user/profile:
    get:
      description: "Get current user profile.\n\nArgs:\n    current_user_id: Current\
        \ authenticated user ID\n    db: Database session\n\nReturns:\n    User profile\
        \ data\n\nRaises:\n    HTTPException: If user not found"
      operationId: get_user_profile_v1_user_profile_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
      security:
      - HTTPBearer: []
      summary: Get User Profile
      tags:
      - user
    patch:
      description: "Update user profile.\n\nArgs:\n    profile_data: Profile update\
        \ data\n    current_user_id: Current authenticated user ID\n    db: Database\
        \ session\n\nReturns:\n    Updated user profile\n\nRaises:\n    HTTPException:\
        \ If user not found or email already exists"
      operationId: update_user_profile_v1_user_profile_patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - HTTPBearer: []
      summary: Update User Profile
      tags:
      - user
